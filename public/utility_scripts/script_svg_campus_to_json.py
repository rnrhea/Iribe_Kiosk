"""
    Matt Graber

    This script is used to save time in creating a JSON for all the building information using the building
    names present in the campus map SVG. It looks for instances of "selectBuilding('Building Name')",
    extracts the argument of the building name, and adds it to the JSON. Each object name will be the bulding name.

    The script will also attempt to populate the building abbreviation field for each building object
    by taking all the capitalized letters and concatenating them into one string.
    For instance: "A.V. Williams" would abbreviate to "AVW", which is its actual building abbreviation.
    This won't always work ("Brendan Iribe Center for Computer Science and Engineering" will become BICCSE, which isn't right),
    but those can be fixed (or just ignored, this is just a prototype).

    To run:

    python script_svg_campus_to_json.py "in-filename.svg" "out-filename.json"

    Note: the contents of the JSON generated by this script will be pasted into campus_map.html
    because Chrome doesn't like it when things read from files on the same computer,
    it gives a CORS error.
"""

import sys
import re

def create_json(infile, outfile):
    # Keep track of all buildings that we've already handled so there aren't duplicates
    added_buildings = []
    # regex pattern
    pattern = re.compile('(?<=selectBuilding\(\').+(?=\'\))')
    with open(infile, "rt") as fin:
        with open(outfile, "wt") as fout:
            fout.write("{")
            for line in fin:
                match = pattern.search(line)
                if match != None:
                    if match.group() not in added_buildings:
                        added_buildings.append(match.group())
                        # Add to the the JSON
                        
                        fout.write("\"" + match.group() + "\":")
                        fout.write("{")
                        # Attempt to construct the building's abbreviation
                        abbvr = ""
                        for letter in match.group():
                            if letter.isupper():
                                # restrict abbreviation to 3 characters (most will be 2 though)
                                if len(abbvr) < 3:
                                    abbvr += letter
                        fout.write("\"abbreviation\": \"" + abbvr + "\",")
                        fout.write("\"address\": \"\",")
                        fout.write("\"description\": \"\",")
                        fout.write("\"buildingImg\": \"\",")
                        fout.write("\"departments\": \"\"")
                        fout.write("},")
            fout.write("}")


def main():
    create_json(sys.argv[1], sys.argv[2])

if __name__ == "__main__":
    main()